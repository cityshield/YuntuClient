name: Build Windows GUI

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master, dev ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows-gui:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.3'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
        modules: 'qtwebsockets'
        cache: true

    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Cache OSS SDK
      id: cache-oss-sdk
      uses: actions/cache@v4
      with:
        path: |
          oss-sdk-install
        key: oss-sdk-1.10.1-win-${{ runner.os }}

    - name: Build Aliyun OSS C++ SDK
      if: steps.cache-oss-sdk.outputs.cache-hit != 'true'
      run: |
        Write-Host "Building Aliyun OSS C++ SDK 1.10.1..."

        # Clone SDK
        git clone --depth 1 --branch 1.10.1 https://github.com/aliyun/aliyun-oss-cpp-sdk.git
        cd aliyun-oss-cpp-sdk

        # Create build directory
        New-Item -ItemType Directory -Path build -Force
        cd build

        # Configure with CMake
        cmake .. -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE\oss-sdk-install" `
          -DBUILD_SHARED_LIBS=ON

        # Build and install
        cmake --build . --config Release --target install

        Write-Host "OSS SDK built and installed successfully"
      shell: powershell

    - name: Verify OSS SDK Installation
      run: |
        $ossPath = "$env:GITHUB_WORKSPACE\oss-sdk-install"
        Write-Host "=== Verifying OSS SDK Installation ==="
        Write-Host "OSS SDK Install Path: $ossPath"

        if (Test-Path $ossPath) {
          Write-Host "OSS SDK directory exists"

          # List directory structure
          Write-Host "`nDirectory structure:"
          Get-ChildItem $ossPath -Recurse -Depth 2 | Select-Object FullName

          # Check for CMake config files
          Write-Host "`nLooking for CMake config files:"
          if (Test-Path "$ossPath\lib\cmake") {
            Write-Host "Found lib\cmake directory"
            Get-ChildItem "$ossPath\lib\cmake" -Recurse -Filter "*.cmake" | Select-Object FullName
          } else {
            Write-Host "WARNING: lib\cmake directory NOT found"
          }

          # Check for DLLs
          if (Test-Path "$ossPath\bin") {
            Write-Host "`nFound DLLs:"
            Get-ChildItem "$ossPath\bin" -Filter "*.dll" | Select-Object Name
          }

          # Check for headers
          if (Test-Path "$ossPath\include") {
            Write-Host "`nFound headers in include directory"
          }
        } else {
          Write-Host "ERROR: OSS SDK directory does not exist!"
        }
      shell: powershell

    - name: Verify Qt installation
      run: |
        Write-Host "Qt6_DIR: $env:Qt6_DIR"
        Write-Host "Checking Qt installation..."
        if (Test-Path "$env:Qt6_DIR\bin\qmake.exe") {
          Write-Host "qmake.exe found"
        } else {
          Write-Host "qmake.exe NOT found!"
        }
        if (Test-Path "$env:Qt6_DIR\lib\cmake\Qt6") {
          Write-Host "Qt6 CMake config found"
        } else {
          Write-Host "Qt6 CMake config NOT found!"
        }
      shell: powershell

    - name: Create build directory
      run: |
        New-Item -ItemType Directory -Path build -Force
      shell: powershell

    - name: Configure CMake
      run: |
        cd build
        $ossPath = "$env:GITHUB_WORKSPACE\oss-sdk-install"
        $prefixPath = "$env:Qt6_DIR;$ossPath"

        Write-Host "=== CMake Configuration Debug Info ==="
        Write-Host "CMAKE_PREFIX_PATH: $prefixPath"
        Write-Host "OSS SDK Path: $ossPath"
        Write-Host ""

        cmake .. -G "Visual Studio 17 2022" -A x64 `
          -DCMAKE_PREFIX_PATH="$prefixPath" `
          -DCMAKE_BUILD_TYPE=Release `
          --debug-find `
          -DCMAKE_FIND_DEBUG_MODE=ON
      shell: powershell

    - name: Build
      run: |
        cd build
        cmake --build . --config Release
      shell: powershell

    - name: Copy Qt DLLs
      run: |
        cd build\Release
        # Core Qt DLLs
        Copy-Item "$env:Qt6_DIR\bin\Qt6Core.dll" .
        Copy-Item "$env:Qt6_DIR\bin\Qt6Gui.dll" .
        Copy-Item "$env:Qt6_DIR\bin\Qt6Widgets.dll" .
        Copy-Item "$env:Qt6_DIR\bin\Qt6Network.dll" .
        Copy-Item "$env:Qt6_DIR\bin\Qt6WebSockets.dll" .
        Copy-Item "$env:Qt6_DIR\bin\Qt6Sql.dll" .

        # Create platforms directory and copy platform plugin
        New-Item -ItemType Directory -Path platforms -Force
        Copy-Item "$env:Qt6_DIR\plugins\platforms\qwindows.dll" platforms\

        # Copy OSS SDK DLLs
        $ossPath = "$env:GITHUB_WORKSPACE\oss-sdk-install"
        if (Test-Path "$ossPath\bin") {
          Write-Host "Copying OSS SDK DLLs..."
          Copy-Item "$ossPath\bin\*.dll" . -Force
          Write-Host "OSS SDK DLLs copied"
        }

        # Copy OSS SDK third-party dependencies (OpenSSL, libcurl, zlib)
        $ossSourcePath = "$env:GITHUB_WORKSPACE\aliyun-oss-cpp-sdk\third_party\lib\x64"
        if (Test-Path $ossSourcePath) {
          Write-Host "Copying OSS SDK third-party DLLs from source..."
          Copy-Item "$ossSourcePath\libeay32.dll" . -ErrorAction SilentlyContinue
          Copy-Item "$ossSourcePath\ssleay32.dll" . -ErrorAction SilentlyContinue
          Copy-Item "$ossSourcePath\libcurl.dll" . -ErrorAction SilentlyContinue
          Copy-Item "$ossSourcePath\zlibwapi.dll" . -ErrorAction SilentlyContinue
          Write-Host "Third-party DLLs copied"
        } else {
          Write-Host "WARNING: OSS SDK third-party lib directory not found"
        }
      shell: powershell

    - name: Copy configuration files
      run: |
        cd build\Release
        # 复制配置文件模板
        Copy-Item "..\..\config.ini.example" .
        Write-Host "config.ini.example copied"

        # 复制 README 文档
        Copy-Item "..\..\README.md" .
        Write-Host "README.md copied"
      shell: powershell

    - name: Get UTC+8 timestamp
      id: timestamp
      run: |
        # 获取 UTC 时间并转换为 UTC+8
        $utcTime = (Get-Date).ToUniversalTime()
        $utc8Time = $utcTime.AddHours(8)
        $timestamp = $utc8Time.ToString("yyyyMMdd-HHmmss")
        echo "timestamp=$timestamp" >> $env:GITHUB_OUTPUT
        Write-Host "UTC+8 Timestamp: $timestamp"
      shell: powershell

    - name: Package artifacts
      run: |
        $timestamp = "${{ steps.timestamp.outputs.timestamp }}"
        $zipFileName = "YuntuClient_Windows_x64_${timestamp}.zip"
        Write-Host "Creating package: $zipFileName"

        # 直接压缩 Release 目录中的所有文件（不创建额外的文件夹）
        Compress-Archive -Path build\Release\* -DestinationPath $zipFileName

        Write-Host "Package created successfully: $zipFileName"
      shell: powershell

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: YuntuClient-Windows-x64-${{ steps.timestamp.outputs.timestamp }}
        path: YuntuClient_Windows_x64_${{ steps.timestamp.outputs.timestamp }}.zip
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: YuntuClient_Windows_x64_${{ steps.timestamp.outputs.timestamp }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
